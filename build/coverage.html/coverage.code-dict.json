{"/home/travis/build/npmtest/node-npmtest-nemo/test.js":"/* istanbul instrument in package npmtest_nemo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nemo/lib.npmtest_nemo.js":"/* istanbul instrument in package npmtest_nemo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nemo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nemo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nemo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nemo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nemo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nemo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nemo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nemo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nemo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nemo.__dirname + '/lib.npmtest_nemo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/index.js":"/*───────────────────────────────────────────────────────────────────────────*\\\n │  Copyright (C) 2014 PayPal                                                  │\n │                                                                             │\n │                                                                             │\n │   Licensed under the Apache License, Version 2.0 (the \"License\"); you may   │\n │   not use this file except in compliance with the License. You may obtain   │\n │   a copy of the License at http://www.apache.org/licenses/LICENSE-2.0       │\n │                                                                             │\n │   Unless required by applicable law or agreed to in writing, software       │\n │   distributed under the License is distributed on an \"AS IS\" BASIS,         │\n │   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n │   See the License for the specific language governing permissions and       │\n │   limitations under the License.                                            │\n \\*───────────────────────────────────────────────────────────────────────────*/\n'use strict';\n\nlet Promiz = require('./lib/promise'),\n  Configure = require('./lib/configure'),\n  Setup = require('./lib/setup'),\n  debug = require('debug'),\n  log = debug('nemo:log'),\n  error = debug('nemo:error'),\n  _ = require('lodash'),\n  path = require('path');\n\nlog.log = console.log.bind(console);\nerror.log = console.error.bind(console);\n\n/**\n * Represents a Nemo instance\n * @constructor\n * @param {Object} config - Object which contains any plugin registration and optionally nemoData\n *\n */\n\nmodule.exports = function Nemo(_basedir, _configOverride, _cb) {\n  log('Nemo constructor begin');\n  //argument vars\n  var basedir, configOverride, cb, promiz;\n  var nemo = {};\n\n  //check for confit object as single parameter\n  if (arguments.length === 1 && arguments[0].get) {\n    return Setup(arguments[0]);\n  }\n\n  //settle arguments\n  cb = (arguments.length && typeof arguments[arguments.length - 1] === 'function') ? arguments[arguments.length - 1] : undefined;\n  basedir = (arguments.length && typeof arguments[0] === 'string') ? arguments[0] : undefined;\n  configOverride = (!basedir && arguments.length && typeof arguments[0] === 'object') ? arguments[0] : undefined;\n  configOverride = (!configOverride && arguments.length && arguments[1] && typeof arguments[1] === 'object') ? arguments[1] : configOverride;\n  basedir = basedir || process.env.nemoBaseDir || undefined;\n  configOverride = configOverride || {};\n  if (!cb) {\n    log('returning promise');\n    promiz = Promiz();\n    cb = function (err, n) {\n      if (err) {\n        return promiz.reject(err);\n      }\n      promiz.fulfill(n);\n    };\n  }\n  log('basedir', basedir);\n  log('configOverride', configOverride);\n  Configure(basedir, configOverride)\n    .then(function (config) {\n      log('Configure complete');\n      return Setup(config);\n    })\n    .then(function (_nemo) {\n      log('Setup complete');\n      _.merge(nemo, _nemo);\n      return cb(null, nemo);\n    })\n    .catch(cb);\n  return promiz && promiz.promise || nemo;\n};\n\nmodule.exports.Configure = Configure;","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/lib/promise.js":"'use strict';\n\nconst wd = require('selenium-webdriver');\nconst debug = require('debug');\nconst log = debug('nemo:log');\nconst error = debug('nemo:error');\n\nmodule.exports = function () {\n    //return a nodejs promise or webdriver promise\n    let promiz;\n    let wdPromiz = wd.promise.defer();\n    let fulfill = function (n) {\n        wdPromiz.fulfill(n);\n    };\n    let reject = function (err) {\n        wdPromiz.reject(err);\n    };\n    promiz = (global.Promsise) ? new Promise(function (good, bad) {\n        fulfill = good;\n        reject = bad;\n    }) : wdPromiz.promise;\n   return {promise: promiz, fulfill, reject};\n};","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/lib/configure.js":"'use strict';\n\nlet debug = require('debug'),\n  log = debug('nemo:log'),\n  confit = require('confit'),\n  _ = require('lodash'),\n  path = require('path'),\n  Promiz = require('./promise'),\n  handlers = require('shortstop-handlers'),\n  yargs = require('yargs'),\n  error = debug('nemo:error');\n\nlog.log = console.log.bind(console);\nerror.log = console.error.bind(console);\n\nmodule.exports = function Configure(_basedir, _configOverride) {\n  log('_basedir %s, _configOverride %o', _basedir, _configOverride);\n  let basedir, configOverride;\n  //settle arguments\n  basedir = (arguments.length && typeof arguments[0] === 'string') ? arguments[0] : process.env.nemoBaseDir || undefined;\n  configOverride = (!basedir && arguments.length && typeof arguments[0] === 'object') ? arguments[0] : undefined;\n  configOverride = (!configOverride && arguments.length && arguments[1] && typeof arguments[1] === 'object') ? arguments[1] : configOverride;\n  configOverride = (!configOverride) ? {} : configOverride;\n\n  log('basedir %s, configOverride %o', basedir, configOverride);\n\n  let prom = Promiz();\n\n  //hack because confit doesn't JSON.parse environment variables before merging\n  //look into using shorstop handler or pseudo-handler in place of this\n  let envdata = envToJSON('data');\n  let envdriver = envToJSON('driver');\n  let envplugins = envToJSON('plugins');\n  let confitOptions = {\n    protocols: {\n      path: handlers.path(basedir),\n      env: handlers.env(),\n      file: handlers.file(basedir),\n      base64: handlers.base64(),\n      require: handlers.require(basedir),\n      exec: handlers.exec(basedir),\n      glob: handlers.glob(basedir),\n      argv: function argHandler(val) {\n        let argv = yargs.argv;\n        return argv[val] || '';\n      }\n    }\n  };\n  if (basedir) {\n    confitOptions.basedir = path.join(basedir, 'config');\n  }\n  log('confit options', confitOptions);\n  log('confit overrides: \\ndata: %o,\\ndriver: %o\\nplugins: %o', envdata.json, envdriver.json, envplugins.json);\n  //merge any environment JSON into configOverride\n  _.merge(configOverride, envdata.json, envdriver.json, envplugins.json);\n  log('configOverride %o', configOverride);\n\n  confit(confitOptions).addOverride(configOverride).create(function (err, config) {\n    //reset env variables\n    envdata.reset();\n    envdriver.reset();\n    envplugins.reset();\n    if (err) {\n      return prom.reject(err);\n    }\n    prom.fulfill(config);\n  });\n  return prom.promise;\n};\n\nlet envToJSON = function (prop) {\n  let returnJSON = {};\n  let originalValue = process.env[prop];\n  if (originalValue === undefined) {\n    return {\n      'json': {},\n      'reset': function () {\n      }\n    };\n  }\n  try {\n    returnJSON[prop] = JSON.parse(process.env[prop]);\n    delete process.env[prop];\n  } catch (err) {\n    //noop\n    error(err);\n  }\n  return {\n    'json': returnJSON,\n    'reset': function () {\n      process.env[prop] = originalValue;\n    }\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/lib/setup.js":"'use strict';\n\nlet Plugin = require('./plugin'),\n  wd = require('selenium-webdriver'),\n  Promiz = require('./promise'),\n  debug = require('debug'),\n  log = debug('nemo:log'),\n  error = debug('nemo:error'),\n  async = require('async'),\n  Driver = require('./driver');\n\nlog.log = console.log.bind(console);\nerror.log = console.error.bind(console);\n\n\nlet setup = function setup(config, cb) {\n  let nemo = {\n    'data': config.get('data'),\n    'driver': {},\n    '_config': config\n  };\n  Plugin.registration(nemo, config.get('plugins'))\n    .then(function (registerFns) {\n      //add driver setup\n      registerFns.push({fn: driversetup(nemo), priority: 100});\n      registerFns = registerFns.sort(Plugin.compare).map(function (obj) {\n        return obj.fn;\n      });\n      registerFns.unshift(function setWebdriver(callback) {\n        nemo.wd = wd;\n        callback(null);\n      });\n      if (config.get('driver:selenium.version')) {\n        //install before driver setup\n        log('Requested install of selenium version %s', config.get('driver:selenium.version'));\n        var seleniumInstall = require('./install');\n        registerFns.unshift(seleniumInstall(config.get('driver:selenium.version')));\n      }\n      async.waterfall(registerFns, function waterfall(err) {\n        if (err) {\n          cb(err);\n        } else {\n          cb(null, nemo);\n        }\n      });\n    })\n    .catch(function (err) {\n      error(err);\n      cb(err);\n    });\n};\n\nvar driversetup = function (_nemo) {\n  return function driversetup(callback) {\n    var driverConfig = _nemo._config.get('driver');\n    //do driver/view/locator/vars setup\n    (Driver()).setup(driverConfig, function setupCallback(err, _driver) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      //set driver\n      _nemo.driver = _driver;\n      callback(null);\n\n    });\n  };\n};\n\n\n\n\nmodule.exports = function (config) {\n  let promiz = Promiz();\n  if (config.get('driver') === undefined) {\n    var errorMessage = 'Nemo essential driver properties not found in configuration';\n    error(errorMessage);\n    var badDriverProps = new Error(errorMessage);\n    badDriverProps.name = 'nemoBadDriverProps';\n    process.nextTick(function () {\n      promiz.reject(badDriverProps);\n    });\n  } else {\n    setup(config, function (err, nemo) {\n      log('got called back');\n      if (err !== null) {\n        promiz.reject(err);\n        return;\n      }\n      promiz.fulfill(nemo);\n    });\n  }\n\n  return promiz.promise;\n};","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/lib/plugin.js":"'use strict';\n\nlet debug = require('debug'),\n  log = debug('nemo:log'),\n  error = debug('nemo:error'),\n  Promiz = require('./promise');\n\nlog.log = console.log.bind(console);\nerror.log = console.error.bind(console);\n\nmodule.exports.compare = function (a, b) {\n  let ap, bp;\n  ap = (!Number.isNaN(a.priority)) ? a.priority : Number.MIN_VALUE;\n  bp = (!Number.isNaN(b.priority)) ? b.priority : Number.MIN_VALUE;\n  ap = (ap === -1) ? Number.MAX_VALUE : ap;\n  bp = (bp === -1) ? Number.MAX_VALUE : bp;\n  return ap - bp;\n};\n\nmodule.exports.registration = function (nemo, plugins) {\n  log('plugin.registration start');\n  let promiz = Promiz(),\n    pluginError,\n    registerFns = [];\n  let pluginErrored = Object.keys(plugins || {}).find(function pluginsKeys(key) {\n    let pluginConfig = plugins[key],\n      pluginArgs = pluginConfig.arguments || [],\n      modulePath = pluginConfig.module,\n      pluginModule;\n\n    //register this plugin\n    log(`register plugin ${key}`);\n    try {\n      pluginModule = require(modulePath);\n    } catch (err) {\n      pluginError = err;\n      //returning true means we bail out of building registerFns\n      return true;\n    }\n    if (pluginConfig.priority && pluginConfig.priority === 100 || Number.isNaN(pluginConfig.priority)) {\n      pluginError = new Error(`Plugin priority not set properly for ${key}`);\n      return true;\n    }\n\n    registerFns.push({\n      fn: pluginReg(nemo, pluginArgs, pluginModule),\n      key: key,\n      priority: pluginConfig.priority || -1\n    });\n    return false;\n  });\n\n  if (pluginErrored) {\n    error(pluginError);\n    promiz.reject(pluginError);\n\n  } else {\n    log(`plugin.registration fulfill with ${registerFns.length} plugins.`);\n    promiz.fulfill(registerFns);\n  }\n  return promiz.promise;\n};\n\nlet pluginReg = function (_nemo, pluginArgs, pluginModule) {\n  return function pluginReg(callback) {\n\n    pluginArgs.push(_nemo);\n    pluginArgs.push(callback);\n    try {\n      pluginModule.setup.apply(this, pluginArgs);\n    } catch (err) {\n      //dang, someone wrote a crap plugin\n      error(err);\n      let pluginSetupError = new Error('Nemo plugin threw error during setup. ' + err);\n      pluginSetupError.name = 'nemoPluginSetupError';\n      callback(pluginSetupError);\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/lib/driver.js":"/*───────────────────────────────────────────────────────────────────────────*\\\n │  Copyright (C) 2014 PayPal                                                  │\n │                                                                             │\n │                                                                             │\n │   Licensed under the Apache License, Version 2.0 (the \"License\"); you may   │\n │   not use this file except in compliance with the License. You may obtain   │\n │   a copy of the License at http://www.apache.org/licenses/LICENSE-2.0       │\n │                                                                             │\n │   Unless required by applicable law or agreed to in writing, software       │\n │   distributed under the License is distributed on an \"AS IS\" BASIS,         │\n │   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  │\n │   See the License for the specific language governing permissions and       │\n │   limitations under the License.                                            │\n \\*───────────────────────────────────────────────────────────────────────────*/\n/* global require,module */\n'use strict';\nlet fs = require('fs'),\n  debug = require('debug'),\n  log = debug('nemo:log'),\n  error = debug('nemo:error');\n\nlog.log = console.log.bind(console);\nerror.log = console.error.bind(console);\n\nfunction Driver() {\n  log('new Setup instance created');\n\n  return {\n    setup: function doSetup(driverProps, callback) {\n      log('entering doSetup');\n\n      let webdriver = require('selenium-webdriver'),\n        SeleniumServer = require('selenium-webdriver/remote').SeleniumServer,\n        proxy = require('selenium-webdriver/proxy'),\n        caps,\n        driver,\n        tgtBrowser = driverProps.browser,\n        localServer = driverProps.local || false,\n        customCaps = driverProps.serverCaps,\n        serverUrl = driverProps.server,\n        serverProps = driverProps.serverProps || {},\n        serverJar = driverProps.jar,\n        builders = driverProps.builders,\n        proxyDetails = driverProps.proxyDetails,\n        errorObject = null;\n\n      function getServer() {\n        log('attempt getServer');\n        //are we running the tests on the local machine?\n        if (localServer === true) {\n          log('test locally');\n          if (tgtBrowser !== 'chrome' && tgtBrowser !== 'phantomjs' && tgtBrowser !== 'firefox') {\n            //make sure there is a jar file\n            var jarExists = fs.existsSync(serverJar);\n            if (!jarExists) {\n              error('You must specify a valid SELENIUM_JAR value. The value must point to a driver executable in your file system.');\n            }\n            if (serverProps.port === undefined) {\n              serverProps.port = 4444;\n            }\n            var server = new SeleniumServer(serverJar, serverProps);\n            server.start();\n            serverUrl = server.address();\n          } else {\n            serverUrl = null;\n          }\n        }\n        return serverUrl;\n      }\n\n      function getCapabilities() {\n        //specified valid webdriver browser key?\n        if (!webdriver.Capabilities[tgtBrowser]) {\n          log('You have specified targetBrowser: ' + tgtBrowser + ' which is not a built-in webdriver.Capabilities browser option');\n          caps = new webdriver.Capabilities();\n\n        } else {\n          caps = webdriver.Capabilities[tgtBrowser]();\n        }\n        if (customCaps) {\n          Object.keys(customCaps).forEach(function customCapsKeys(key) {\n            caps.set(key, customCaps[key]);\n          });\n        }\n        log('Capabilities', caps);\n        return caps;\n      }\n\n      function getProxy() {\n        if (proxyDetails) {\n          log('proxyDetails', proxyDetails);\n          if (proxyDetails.method && proxy[proxyDetails.method]) {\n            return proxy[proxyDetails.method].apply(proxy, proxyDetails.args);\n          } else {\n            throw new Error('nemo: proxy configuration is incomplete or does not match the selenium-webdriver/proxy API');\n          }\n\n        } else {\n          return proxy.direct();\n        }\n      }\n\n      try {\n\n        var builder = new webdriver.Builder();\n        if (builders !== undefined) {\n          Object.keys(builders).forEach(function (bldr) {\n            builder = builder[bldr].apply(builder, builders[bldr]);\n          });\n        }\n        if (serverUrl !== undefined && !(builders && builders.usingServer)) {\n          builder = builder.usingServer(getServer());\n        }\n        if (tgtBrowser !== undefined && !(builders && builders.forBrowser)) {\n          builder = builder.withCapabilities(getCapabilities());\n        }\n        if (proxyDetails !== undefined) {\n          builder = builder.setProxy(getProxy());\n        }\n        log('builder FINAL', builder);\n        driver = builder.build();\n      } catch (err) {\n        error('Encountered an error during driver setup: %s', err);\n        errorObject = err;\n        callback(errorObject);\n        return;\n      }\n      driver.getSession().then(function () {\n        callback(null, driver);\n      }).catch(function (err) {\n        error('Encountered an error during driver getSession: %s', err);\n        callback(err);\n      });\n    }\n  };\n}\nmodule.exports = Driver;\n","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/Gruntfile.js":"/* global require,process,module */\n'use strict';\nvar nconf = require('nconf');\n\nmodule.exports = function (grunt) {\n\tnconf.env()\n\t\t.argv();\n\tgrunt.initConfig({\n\t\tsimplemocha: {\n\t\t\toptions: {\n\t\t\t\tglobals: ['should'],\n\t\t\t\ttimeout: 30000,\n\t\t\t\tignoreLeaks: false,\n\t\t\t\tgrep: grunt.option('grep') || '',\n\t\t\t\tui: 'bdd',\n\t\t\t\treporter: 'spec'\n\t\t\t},\n\n\t\t\tall: {\n\t\t\t\tsrc: ['test/*.js']\n\t\t\t}\n\t\t},\n\t\tjshint: {\n\t\t\tfiles: ['index.js', 'Gruntfile.js', 'lib/*.js'],\n\t\t\toptions: {\n\t\t\t\tjshintrc: true\n\t\t\t}\n\t\t}\n\t});\n\n\tgrunt.loadNpmTasks('grunt-simple-mocha');\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\tgrunt.registerTask('default', ['simplemocha', 'jshint']);\n};","/home/travis/build/npmtest/node-npmtest-nemo/node_modules/nemo/lib/install.js":"'use strict';\n\nvar path = require('path'),\n  debug = require('debug'),\n  log = debug('nemo:log'),\n  error = debug('nemo:error'),\n  fs = require('fs'),\n  exec = require('child_process').exec;\n\nlog.log = console.log.bind(console);\nerror.log = console.error.bind(console);\n\nmodule.exports = function (version) {\n  return function installSelenium(callback) {\n    //check package.json\n    var pkg = require(path.resolve(__dirname, '../package.json'));\n    if (pkg.dependencies['selenium-webdriver'] === version) {\n      log('selenium version %s already installed', version);\n      return callback(null);\n    }\n    var save = (process.env.NEMO_UNIT_TEST) ? '' : '--save';\n    var cmd = 'npm install ' + save + ' selenium-webdriver@' + version;\n    log('npm install cmd', cmd);\n    exec(cmd, {cwd: path.resolve(__dirname, '..')},\n      function (err, stdout, stderr) {\n        if (stdout) {\n          log('seleniumInstall: stdout', stdout);\n        }\n        if (stderr) {\n          error('seleniumInstall: stderr', stderr);\n        }\n        if (err !== null) {\n          error('exec error', err);\n          return callback(err);\n        }\n        callback(null);\n\n      });\n  };\n\n};\n"}